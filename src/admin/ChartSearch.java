/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.net.ConnectException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import util.Sutil;

/**
 *
 * @author FG
 */
public final class ChartSearch extends javax.swing.JDialog {

    /**
     * Creates new form ChartSearch
     */
    private Connection conn;
    private int row;
    private int chart_id;
    private int togglestatus;

    public ChartSearch(java.awt.Frame parent, boolean modal, Connection conn) {
        super(parent, modal);
        this.conn = conn;
        togglestatus=0;
        initComponents();
        loadDatabase();
        tableSelectionListener();
        setLocationRelativeTo(null);

    }

    private void tableSelectionListener() {

        
        
        tglbtn_Edit.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                togglestatus = 1;
                System.out.println("Status:" + togglestatus);
            } else {
                togglestatus = 2;
                System.out.println("Status:" + togglestatus);
            }
        });
        if (togglestatus == 1) {
           
        } else if (togglestatus == 2) {
           
        }

    }

    private void tableSelectionListener1() {

        ListSelectionListener listener1 = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = tblChart.getSelectedRow();
                if (row >= 0) {
                    FrmAdmin.txtChartNumber_Journal.setText(tblChart.getValueAt(row, 0).toString());
                    FrmAdmin.txtChartName_Journal.setText(tblChart.getValueAt(row, 1).toString());

                    dispose();
                }
            }
        };
        tblChart.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblChart.getSelectionModel().addListSelectionListener(listener1);

    }
    
    private void tableSelectionListener2() {
        ListSelectionListener listener2 = (ListSelectionEvent e) -> {
                row = tblChart.getSelectedRow();
                if (row >= 0) {
                    txtChartNo.setText(tblChart.getValueAt(row, 0).toString());
                    txtChartName.setText(tblChart.getValueAt(row, 1).toString());
                }
            };
            tblChart.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblChart.getSelectionModel().addListSelectionListener(listener2);
       
    }
    
    

    public void removeTableData() {
        DefaultTableModel tableModel = (DefaultTableModel) tblChart.getModel();
        tableModel.setRowCount(0);

    }

    public void loadDatabase() {

        try {

            String sql = "SELECT * FROM akuntansi.chart";
            PreparedStatement pstatement = conn.prepareStatement(sql);

            ResultSet rs = pstatement.executeQuery();
            if (rs.isBeforeFirst()) { // check is resultset not empty
                DefaultTableModel tableModel = (DefaultTableModel) tblChart.getModel();
                while (rs.next()) {
                    int chart_no = rs.getInt("chart_no");
                    String chart_name = rs.getString("chart_name");

                    Object data[][] = {
                        {chart_no, chart_name}
                    };
                    for (Object o[] : data) {
                        tableModel.addRow(o);
                    }
                }
            } else {

            }
            rs.close();
            pstatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(FrmAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblChart = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtChartNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtChartName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tglbtn_Edit = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AMA | v.1");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Browse Chart"));

        tblChart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chart No", "Chart Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblChart);

        jLabel2.setText("Chart Name");

        jButton2.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2))
                    .addComponent(jButton2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Customize Chart"));

        jLabel3.setText("Chart No");

        jLabel4.setText("Chart Name");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tglbtn_Edit.setText("Edit");
        tglbtn_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglbtn_EditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(txtChartNo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtChartName, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tglbtn_Edit))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(tglbtn_Edit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChartNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChartName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if ((!txtChartNo.getText().trim().isEmpty()) && (!txtChartName.getText().trim().isEmpty())) {
            try {
                executeAdd();
                removeTableData();
                loadDatabase();
                txtChartName.setText("");
                txtChartNo.setText("");
                Sutil.msg(this, "Chart added.");
            } catch (SQLException ex) {
                Logger.getLogger(ChartSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            Sutil.msg(this, "Some field is still empty.");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if ((!txtChartNo.getText().trim().isEmpty()) && (!txtChartName.getText().trim().isEmpty())) {
            try {
                executeUpdate();
                removeTableData();
                loadDatabase();
                txtChartName.setText("");
                txtChartNo.setText("");

            } catch (SQLException ex) {
                Logger.getLogger(ChartSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            Sutil.msg(this, "Some field is still empty.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            executeDelete();
            removeTableData();
            loadDatabase();
            txtChartName.setText("");
            txtChartNo.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(ChartSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tglbtn_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglbtn_EditActionPerformed

        tglbtn_Edit.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    togglestatus = 1;
                    System.out.println("yes" + togglestatus);
                } else {
                    togglestatus = 0;
                }
            }
        });
        
        System.out.println("status now: "+togglestatus);
        if (togglestatus == 1) {
            System.out.println("status now-2: "+togglestatus);
            ListSelectionListener listener1 = new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    row = tblChart.getSelectedRow();
                    if (row >= 0) {
                        txtChartNo.setText(tblChart.getValueAt(row, 0).toString());
                        txtChartName.setText(tblChart.getValueAt(row, 1).toString());
                    }
                }
            };
            tblChart.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblChart.getSelectionModel().addListSelectionListener(listener1);
        } else if (togglestatus == 0) {
            ListSelectionListener listener2 = new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    int row = tblChart.getSelectedRow();
                    if (row >= 0) {
                        FrmAdmin.txtChartNumber_Journal.setText(tblChart.getValueAt(row, 0).toString());
                        FrmAdmin.txtChartName_Journal.setText(tblChart.getValueAt(row, 1).toString());

                        dispose();
                    }
                }
            };
            tblChart.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tblChart.getSelectionModel().addListSelectionListener(listener2);
        }

    }//GEN-LAST:event_tglbtn_EditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tblChart;
    private javax.swing.JToggleButton tglbtn_Edit;
    private javax.swing.JTextField txtChartName;
    private javax.swing.JTextField txtChartNo;
    // End of variables declaration//GEN-END:variables

    private void executeAdd() throws SQLException {
        DefaultTableModel tableModel = (DefaultTableModel) tblChart.getModel();

        String insertSql = "insert into akuntansi.chart(chart_no,chart_name) values (?,?)";
        PreparedStatement pstatement = conn.prepareStatement(insertSql);
        pstatement.setInt(1, Integer.valueOf(txtChartNo.getText()));
        pstatement.setString(2, txtChartName.getText());
        pstatement.executeUpdate();

        tableModel.setRowCount(0);
        loadDatabase();
        pstatement.close();
    }

    private void executeUpdate() throws SQLException {

        String getid = "SELECT chart_id FROM akuntansi.chart where chart_no=?";
        PreparedStatement pstatement1 = conn.prepareStatement(getid);
        pstatement1.setString(1, txtChartNo.getText().trim());
        ResultSet rs = pstatement1.executeQuery();
        if (rs.isBeforeFirst()) { // check is resultset not empty
            while (rs.next()) {
                chart_id = rs.getInt("chart_id");

            }
        } else {
        }

        String editSql = "update akuntansi.chart set "
                + "chart_no=?, chart_name=?"
                + "where chart_id=?";
        PreparedStatement pstatement2 = conn.prepareStatement(editSql);
        pstatement2.setString(1, txtChartNo.getText().trim());
        pstatement2.setString(2, txtChartName.getText().trim());
        pstatement2.setInt(3, chart_id);
        pstatement2.executeUpdate();
        pstatement2.close();
        Sutil.msg(this, "Chart has been updated.");
    }

    private void executeDelete() throws SQLException {
        if (Sutil.msq(this, "Are you sure?") == 0) {

            String getid = "SELECT chart_id FROM akuntansi.chart where chart_no=?";
            PreparedStatement pstatement1 = conn.prepareStatement(getid);
            pstatement1.setString(1, txtChartNo.getText().trim());
            ResultSet rs = pstatement1.executeQuery();
            if (rs.isBeforeFirst()) { // check is resultset not empty
                while (rs.next()) {
                    chart_id = rs.getInt("chart_id");

                }
            } else {
            }

            DefaultTableModel tableModel = (DefaultTableModel) tblChart.getModel();
            tableModel.setRowCount(0);
            String deleteSql = "DELETE FROM akuntansi.chart where chart_id = ?";
            PreparedStatement pstatement = conn.prepareStatement(deleteSql);
            pstatement.setInt(1, chart_id);
            pstatement.executeUpdate();
            pstatement.close();
        }
    }

}
